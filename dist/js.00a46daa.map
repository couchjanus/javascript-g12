{"version":3,"sources":["js/test.js","js/index.js"],"names":["console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,cAEA;;AAEA;;;;AAIA;;;;;AAKA;;;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;;AAEAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,gCAApC,GAEA;AACA;AACA;AACA;AACA;;AAEAD,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,sEAAzC,GAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;ACtOA","file":"js.00a46daa.map","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// Комментарий, занимающий одну строку.\n\n/* Блочный комментарий начинается с косой черты и звездочки(*), \n   а заканчивается ими же в обратном порядке \n*/ \n\n/*\n    * Это многострочный\n    * комментарий\n*/\n    \n/*  \n  Нельзя вкладывать \\/* комментарии друг в друга SyntaxError *\\/ \n*/\n    \n// alert(\"Hello Javascript!\");\n\n// window.foo = 'Hello bar!';\n\n// alert(window.foo);\n\n// ============Ключевое слово var====================\n// var x = 30;\n// console.log(\"the value of x is\", x); // the value of x is 30\n\n// confirm(\"Well, let's go?\");\n// prompt(\"Dude, tell me everything you know about programming\", \"...\");\n\n// console.log(\"the value of cat is \", cat);\n// var cat = 'Red Cat';\n\n// ============Ключевое слово let====================\n// let a = 10;\n\n// ==========================================\n// console.log(\"the value of cat is \", cat);\n// let cat = 'Red Cat';\n\n//  ReferenceError: can't access lexical declaration\n// `cat' before initialization\n// ==========================================\n\n// console.log(\"the value of a is \", a);\n\n// {\n//     let a = 3;\n//     console.log(\"the value of a inside block is \", a);\n// }\n\n// console.log(\"the value of a outside block is \", a);\n\n\n// console.log(1 / 2); /* возвращает 0.5 */\n// console.log(1 / 2 == 1.0 / 2.0); /* возвращает true */\n\n// ===============declaring variables=============\n\n// let a = 10;\n// let b = 3;\n// let c = 15;\n// let d = '5';\n// let e = 'My name';\n// let f = 'Maybe';\n\n// ============Ключевое слово const====================\n// const NAME_ARR = [];\n// const NAME = 'Maybe';\n// NAME_ARR.push('My name');\n// NAME_ARR.push(NAME);\n// console.log(NAME_ARR[0], ' is ', NAME_ARR[1]);\n\n// ============Группировка сообщений====================\n\n// Вы можете использовать console.group() для создания indented groups в выводе консоли.\n\n// ====================Addition======================\n\n// console.group('Addition');\n// console.log(a + b); // 13\n// console.log(a + d); // 105\n// console.log(e + ' ' + f);\n// console.log(e += ' is the Fly Cat');\n// console.groupEnd();\n\n\n// ==============Оформление сообщений===================\n\n// можете использовать спецификатор формата \"%c\" для стилизации консольных сообщений:\n\nconsole.log(\"%cMy stylish message\", \"color: red; font-style: italic\");\n\n// =========Ошибки округления=============\n// if ( а + Ь == 0.3 ) { \n//   // не делайте так !\n//   alert ( \"You got 0.3 . \" );\n// }\n  \nconsole.log(\"Никогда %cне делайте так!\", \"color: red; font-size: 24px; background-color: yellow; padding: 2px;\");\n\n// ====================Incrementing======================\n// a++;\n// b--;\n// --b;\n// c += a;\n// console.group('Incrementing');\n// console.log(a); // 11   \n// console.log(b); // 1\n// console.log(c); // 25\n// console.groupEnd();\n\n// ====================Присваивание======================\n// var x = 30,\n//     y = 3;\n\n// console.log(\"Присваивание со сложением x += y\", x += y);\n// console.log(\"Присваивание с вычитанием x-=y x=x-y\", x -= y);\n// console.log(\"Присваивание с умножением x *= y x = x * y\", x *= y);\n// console.log(\"Присваивание с делением x /= y x = x / y\", x /= y);\n// console.log(\"Присваивание по модулю x %= y x = x % y\", x %= y);\n\n// =============declaring strings========================\n\n// var srt1 = 'this is my string',\n//     srt2 = 'my second string',\n//     srt3 = \"my name is chris\";\n\n// ===============declaring numbers========================\n\n// let num1 = 10,\n//     num2 = 500,\n//     num3 = 3.14;\n\n// ===============booleans (truthy / falsy)==================\n\n// let b1 = true,\n//     b2 = false;\n\n\n// ==================objects========================\n// const user = {\n//     name: 'Chris',\n//     username: 'chrisoncode'\n// };\n\n// ======================arrays======================\n\n// const users = ['chris', 'nick', 'holly'];\n// const luckyNumbers = [1, 43, 54, 132];\n// const whatever = ['chris', 1, 'holly'];\n\n// ====================typeof=======================\n\n// console.log(typeof (message));\n\n// console.log(typeof (b1));\n// console.log(typeof (num3));\n// console.log(typeof (users));\n// console.log(typeof (user));\n\n// console.log(typeof (null));\n\n// console.log(typeof (function () {}));\n\n\n// ======================undefined==================\n// var messageUndifined;\n// console.log(messageUndifined == undefined);\n\n// =====================null========================\n// var car = null; // пull\n// alert(typeof car); // \"object \"\n\n// =================isNaN===============================\n// console.log(isNaN(NaN)); // true\n// console.log(isNaN(10)); // false\n// console.log(isNaN(\"10\")); // false\n// console.log(isNaN(\"Ыuе\")); // true\n// console.log(isNaN(true)); // false\n\n\n// ========================convert========================\n// Унарный оператор «плюс» работает так же, как функция Number().\n\n// let test = (+\"1.1\") + (+\"1.1\"); // 2.2\n\n// parseInt(\"0xAF\", 16); //175\n// var num = parseFloat(\"1234blue\");\n// var num4 = parseFloat(\"22.5\");\n\n// =======Octal literals are not allowed in strict mode. (W115)=========\n// var xb = 01010101,\n//     yb = 10101010;\n\n// console.log(\"Присваивание с побитовым AND x&=y x=x&y\", xb &= yb);\n// console.log(\"Присваивание с побитовым XOR x^=y x=x^y\", xb ^= yb);\n// console.log(\"Присваивание с побитовым OR x|=y x=x|y\", xb | yb);\n\n\n// var xb = 01010101;\n// console.log(\"Присваивание с левым сдвигом x<<=y xb = xb<<y\", xb <<= y);\n// console.log(\"Присваивание с правым сдвигом xb>>=y xb = xb >> y\", xb >>= y);\n\n// Line is too long. (W101)\n// console.log(\"Присваивание с беззнаковым сдвигом вправо xb>>>=y xb=xb>>> y\", xb >>>= y);\n\n// var message = \"Hello world !\";\n// var messageAsBoolean = Boolean(message);\n\n// ====================boolean operators=======================\n// var a1 = true && true; // t && t возвращает true\n// var a2 = true && false; // t && f возвращает false\n// var a3 = false && true; // f && t возвращает false\n// var a4 = false && (3 == 4); // f && f возвращает false\n// var a5 = \"Cat\" && \"Dog\"; // t && t возвращает Dog\n// var a6 = false && \"Cat\"; // f && t возвращает false\n// var a7 = \"Cat\" && false; // t && f возвращает false\n// var o1 = true || true; // t || t возвращает true\n// var o2 = false || true; // f || t возвращает true\n// var o3 = true || false; // t || f возвращает true\n// var o4 = false || (3 == 4); // f || f возвращает false\n// var o5 = \"Cat\" || \"Dog\"; // t || t возвращает Cat\n// var o6 = false || \"Cat\"; // f || t возвращает Cat\n// var o7 = \"Cat\" || false; // t || f возвращает Cat\n\n// var n1 = !true; // !t возвращает false\n// var n2 = !false; // !f возвращает true\n// var n3 = !\"Cat\"; // !t возвращает false\n// let anything1 = false && anything // \"короткое замыкание\" с результатом false.\n// let anything2 = true || anything // \"короткое замыкание\" с результатом true.\n","import './test';\n// import './calc';"]}