{"id":"js/test.js","dependencies":[{"name":"/home/janus/www/javascript-g12/package.json","includedInParent":true,"mtime":1550831417272}],"generated":{"js":"'use strict'; // Комментарий, занимающий одну строку.\n\n/* Блочный комментарий начинается с косой черты и звездочки(*), \n   а заканчивается ими же в обратном порядке \n*/\n\n/*\n    * Это многострочный\n    * комментарий\n*/\n\n/*  \n  Нельзя вкладывать \\/* комментарии друг в друга SyntaxError *\\/ \n*/\n// alert(\"Hello Javascript!\");\n// window.foo = 'Hello bar!';\n// alert(window.foo);\n// ============Ключевое слово var====================\n// var x = 30;\n// console.log(\"the value of x is\", x); // the value of x is 30\n// confirm(\"Well, let's go?\");\n// prompt(\"Dude, tell me everything you know about programming\", \"...\");\n// console.log(\"the value of cat is \", cat);\n// var cat = 'Red Cat';\n// ============Ключевое слово let====================\n// let a = 10;\n// ==========================================\n// console.log(\"the value of cat is \", cat);\n// let cat = 'Red Cat';\n//  ReferenceError: can't access lexical declaration\n// `cat' before initialization\n// ==========================================\n// console.log(\"the value of a is \", a);\n// {\n//     let a = 3;\n//     console.log(\"the value of a inside block is \", a);\n// }\n// console.log(\"the value of a outside block is \", a);\n// console.log(1 / 2); /* возвращает 0.5 */\n// console.log(1 / 2 == 1.0 / 2.0); /* возвращает true */\n// ===============declaring variables=============\n// let a = 10;\n// let b = 3;\n// let c = 15;\n// let d = '5';\n// let e = 'My name';\n// let f = 'Maybe';\n// ============Ключевое слово const====================\n// const NAME_ARR = [];\n// const NAME = 'Maybe';\n// NAME_ARR.push('My name');\n// NAME_ARR.push(NAME);\n// console.log(NAME_ARR[0], ' is ', NAME_ARR[1]);\n// ============Группировка сообщений====================\n// Вы можете использовать console.group() для создания indented groups в выводе консоли.\n// ====================Addition======================\n// console.group('Addition');\n// console.log(a + b); // 13\n// console.log(a + d); // 105\n// console.log(e + ' ' + f);\n// console.log(e += ' is the Fly Cat');\n// console.groupEnd();\n// ==============Оформление сообщений===================\n// можете использовать спецификатор формата \"%c\" для стилизации консольных сообщений:\n\nconsole.log(\"%cMy stylish message\", \"color: red; font-style: italic\"); // =========Ошибки округления=============\n// if ( а + Ь == 0.3 ) { \n//   // не делайте так !\n//   alert ( \"You got 0.3 . \" );\n// }\n\nconsole.log(\"Никогда %cне делайте так!\", \"color: red; font-size: 24px; background-color: yellow; padding: 2px;\"); // ====================Incrementing======================\n// a++;\n// b--;\n// --b;\n// c += a;\n// console.group('Incrementing');\n// console.log(a); // 11   \n// console.log(b); // 1\n// console.log(c); // 25\n// console.groupEnd();\n// ====================Присваивание======================\n// var x = 30,\n//     y = 3;\n// console.log(\"Присваивание со сложением x += y\", x += y);\n// console.log(\"Присваивание с вычитанием x-=y x=x-y\", x -= y);\n// console.log(\"Присваивание с умножением x *= y x = x * y\", x *= y);\n// console.log(\"Присваивание с делением x /= y x = x / y\", x /= y);\n// console.log(\"Присваивание по модулю x %= y x = x % y\", x %= y);\n// =============declaring strings========================\n// var srt1 = 'this is my string',\n//     srt2 = 'my second string',\n//     srt3 = \"my name is chris\";\n// ===============declaring numbers========================\n// let num1 = 10,\n//     num2 = 500,\n//     num3 = 3.14;\n// ===============booleans (truthy / falsy)==================\n// let b1 = true,\n//     b2 = false;\n// ==================objects========================\n// const user = {\n//     name: 'Chris',\n//     username: 'chrisoncode'\n// };\n// ======================arrays======================\n// const users = ['chris', 'nick', 'holly'];\n// const luckyNumbers = [1, 43, 54, 132];\n// const whatever = ['chris', 1, 'holly'];\n// ====================typeof=======================\n// console.log(typeof (message));\n// console.log(typeof (b1));\n// console.log(typeof (num3));\n// console.log(typeof (users));\n// console.log(typeof (user));\n// console.log(typeof (null));\n// console.log(typeof (function () {}));\n// ======================undefined==================\n// var messageUndifined;\n// console.log(messageUndifined == undefined);\n// =====================null========================\n// var car = null; // пull\n// alert(typeof car); // \"object \"\n// =================isNaN===============================\n// console.log(isNaN(NaN)); // true\n// console.log(isNaN(10)); // false\n// console.log(isNaN(\"10\")); // false\n// console.log(isNaN(\"Ыuе\")); // true\n// console.log(isNaN(true)); // false\n// ========================convert========================\n// Унарный оператор «плюс» работает так же, как функция Number().\n// let test = (+\"1.1\") + (+\"1.1\"); // 2.2\n// parseInt(\"0xAF\", 16); //175\n// var num = parseFloat(\"1234blue\");\n// var num4 = parseFloat(\"22.5\");\n// =======Octal literals are not allowed in strict mode. (W115)=========\n// var xb = 01010101,\n//     yb = 10101010;\n// console.log(\"Присваивание с побитовым AND x&=y x=x&y\", xb &= yb);\n// console.log(\"Присваивание с побитовым XOR x^=y x=x^y\", xb ^= yb);\n// console.log(\"Присваивание с побитовым OR x|=y x=x|y\", xb | yb);\n// var xb = 01010101;\n// console.log(\"Присваивание с левым сдвигом x<<=y xb = xb<<y\", xb <<= y);\n// console.log(\"Присваивание с правым сдвигом xb>>=y xb = xb >> y\", xb >>= y);\n// Line is too long. (W101)\n// console.log(\"Присваивание с беззнаковым сдвигом вправо xb>>>=y xb=xb>>> y\", xb >>>= y);\n// var message = \"Hello world !\";\n// var messageAsBoolean = Boolean(message);\n// ====================boolean operators=======================\n// var a1 = true && true; // t && t возвращает true\n// var a2 = true && false; // t && f возвращает false\n// var a3 = false && true; // f && t возвращает false\n// var a4 = false && (3 == 4); // f && f возвращает false\n// var a5 = \"Cat\" && \"Dog\"; // t && t возвращает Dog\n// var a6 = false && \"Cat\"; // f && t возвращает false\n// var a7 = \"Cat\" && false; // t && f возвращает false\n// var o1 = true || true; // t || t возвращает true\n// var o2 = false || true; // f || t возвращает true\n// var o3 = true || false; // t || f возвращает true\n// var o4 = false || (3 == 4); // f || f возвращает false\n// var o5 = \"Cat\" || \"Dog\"; // t || t возвращает Cat\n// var o6 = false || \"Cat\"; // f || t возвращает Cat\n// var o7 = \"Cat\" || false; // t || f возвращает Cat\n// var n1 = !true; // !t возвращает false\n// var n2 = !false; // !f возвращает true\n// var n3 = !\"Cat\"; // !t возвращает false\n// let anything1 = false && anything // \"короткое замыкание\" с результатом false.\n// let anything2 = true || anything // \"короткое замыкание\" с результатом true.","map":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/test.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":14},"source":"js/test.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":0},"source":"js/test.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"js/test.js","original":{"line":9,"column":0}},{"generated":{"line":12,"column":0},"source":"js/test.js","original":{"line":14,"column":0}},{"generated":{"line":15,"column":0},"source":"js/test.js","original":{"line":18,"column":0}},{"generated":{"line":16,"column":0},"source":"js/test.js","original":{"line":20,"column":0}},{"generated":{"line":17,"column":0},"source":"js/test.js","original":{"line":22,"column":0}},{"generated":{"line":18,"column":0},"source":"js/test.js","original":{"line":24,"column":0}},{"generated":{"line":19,"column":0},"source":"js/test.js","original":{"line":25,"column":0}},{"generated":{"line":20,"column":0},"source":"js/test.js","original":{"line":26,"column":0}},{"generated":{"line":21,"column":0},"source":"js/test.js","original":{"line":28,"column":0}},{"generated":{"line":22,"column":0},"source":"js/test.js","original":{"line":29,"column":0}},{"generated":{"line":23,"column":0},"source":"js/test.js","original":{"line":31,"column":0}},{"generated":{"line":24,"column":0},"source":"js/test.js","original":{"line":32,"column":0}},{"generated":{"line":25,"column":0},"source":"js/test.js","original":{"line":34,"column":0}},{"generated":{"line":26,"column":0},"source":"js/test.js","original":{"line":35,"column":0}},{"generated":{"line":27,"column":0},"source":"js/test.js","original":{"line":37,"column":0}},{"generated":{"line":28,"column":0},"source":"js/test.js","original":{"line":38,"column":0}},{"generated":{"line":29,"column":0},"source":"js/test.js","original":{"line":39,"column":0}},{"generated":{"line":30,"column":0},"source":"js/test.js","original":{"line":41,"column":0}},{"generated":{"line":31,"column":0},"source":"js/test.js","original":{"line":42,"column":0}},{"generated":{"line":32,"column":0},"source":"js/test.js","original":{"line":43,"column":0}},{"generated":{"line":33,"column":0},"source":"js/test.js","original":{"line":45,"column":0}},{"generated":{"line":34,"column":0},"source":"js/test.js","original":{"line":47,"column":0}},{"generated":{"line":35,"column":0},"source":"js/test.js","original":{"line":48,"column":0}},{"generated":{"line":36,"column":0},"source":"js/test.js","original":{"line":49,"column":0}},{"generated":{"line":37,"column":0},"source":"js/test.js","original":{"line":50,"column":0}},{"generated":{"line":38,"column":0},"source":"js/test.js","original":{"line":52,"column":0}},{"generated":{"line":39,"column":0},"source":"js/test.js","original":{"line":55,"column":0}},{"generated":{"line":40,"column":0},"source":"js/test.js","original":{"line":56,"column":0}},{"generated":{"line":41,"column":0},"source":"js/test.js","original":{"line":58,"column":0}},{"generated":{"line":42,"column":0},"source":"js/test.js","original":{"line":60,"column":0}},{"generated":{"line":43,"column":0},"source":"js/test.js","original":{"line":61,"column":0}},{"generated":{"line":44,"column":0},"source":"js/test.js","original":{"line":62,"column":0}},{"generated":{"line":45,"column":0},"source":"js/test.js","original":{"line":63,"column":0}},{"generated":{"line":46,"column":0},"source":"js/test.js","original":{"line":64,"column":0}},{"generated":{"line":47,"column":0},"source":"js/test.js","original":{"line":65,"column":0}},{"generated":{"line":48,"column":0},"source":"js/test.js","original":{"line":67,"column":0}},{"generated":{"line":49,"column":0},"source":"js/test.js","original":{"line":68,"column":0}},{"generated":{"line":50,"column":0},"source":"js/test.js","original":{"line":69,"column":0}},{"generated":{"line":51,"column":0},"source":"js/test.js","original":{"line":70,"column":0}},{"generated":{"line":52,"column":0},"source":"js/test.js","original":{"line":71,"column":0}},{"generated":{"line":53,"column":0},"source":"js/test.js","original":{"line":72,"column":0}},{"generated":{"line":54,"column":0},"source":"js/test.js","original":{"line":74,"column":0}},{"generated":{"line":55,"column":0},"source":"js/test.js","original":{"line":76,"column":0}},{"generated":{"line":56,"column":0},"source":"js/test.js","original":{"line":78,"column":0}},{"generated":{"line":57,"column":0},"source":"js/test.js","original":{"line":80,"column":0}},{"generated":{"line":58,"column":0},"source":"js/test.js","original":{"line":81,"column":0}},{"generated":{"line":59,"column":0},"source":"js/test.js","original":{"line":82,"column":0}},{"generated":{"line":60,"column":0},"source":"js/test.js","original":{"line":83,"column":0}},{"generated":{"line":61,"column":0},"source":"js/test.js","original":{"line":84,"column":0}},{"generated":{"line":62,"column":0},"source":"js/test.js","original":{"line":85,"column":0}},{"generated":{"line":63,"column":0},"source":"js/test.js","original":{"line":88,"column":0}},{"generated":{"line":64,"column":0},"source":"js/test.js","original":{"line":90,"column":0}},{"name":"console","generated":{"line":66,"column":0},"source":"js/test.js","original":{"line":92,"column":0}},{"generated":{"line":66,"column":7},"source":"js/test.js","original":{"line":92,"column":7}},{"name":"log","generated":{"line":66,"column":8},"source":"js/test.js","original":{"line":92,"column":8}},{"generated":{"line":66,"column":11},"source":"js/test.js","original":{"line":92,"column":0}},{"generated":{"line":66,"column":12},"source":"js/test.js","original":{"line":92,"column":12}},{"generated":{"line":66,"column":34},"source":"js/test.js","original":{"line":92,"column":0}},{"generated":{"line":66,"column":36},"source":"js/test.js","original":{"line":92,"column":36}},{"generated":{"line":66,"column":68},"source":"js/test.js","original":{"line":92,"column":0}},{"generated":{"line":66,"column":71},"source":"js/test.js","original":{"line":94,"column":0}},{"generated":{"line":67,"column":0},"source":"js/test.js","original":{"line":95,"column":0}},{"generated":{"line":68,"column":0},"source":"js/test.js","original":{"line":96,"column":0}},{"generated":{"line":69,"column":0},"source":"js/test.js","original":{"line":97,"column":0}},{"generated":{"line":70,"column":0},"source":"js/test.js","original":{"line":98,"column":0}},{"name":"console","generated":{"line":72,"column":0},"source":"js/test.js","original":{"line":100,"column":0}},{"generated":{"line":72,"column":7},"source":"js/test.js","original":{"line":100,"column":7}},{"name":"log","generated":{"line":72,"column":8},"source":"js/test.js","original":{"line":100,"column":8}},{"generated":{"line":72,"column":11},"source":"js/test.js","original":{"line":100,"column":0}},{"generated":{"line":72,"column":12},"source":"js/test.js","original":{"line":100,"column":12}},{"generated":{"line":72,"column":39},"source":"js/test.js","original":{"line":100,"column":0}},{"generated":{"line":72,"column":41},"source":"js/test.js","original":{"line":100,"column":41}},{"generated":{"line":72,"column":111},"source":"js/test.js","original":{"line":100,"column":0}},{"generated":{"line":72,"column":114},"source":"js/test.js","original":{"line":102,"column":0}},{"generated":{"line":73,"column":0},"source":"js/test.js","original":{"line":103,"column":0}},{"generated":{"line":74,"column":0},"source":"js/test.js","original":{"line":104,"column":0}},{"generated":{"line":75,"column":0},"source":"js/test.js","original":{"line":105,"column":0}},{"generated":{"line":76,"column":0},"source":"js/test.js","original":{"line":106,"column":0}},{"generated":{"line":77,"column":0},"source":"js/test.js","original":{"line":107,"column":0}},{"generated":{"line":78,"column":0},"source":"js/test.js","original":{"line":108,"column":0}},{"generated":{"line":79,"column":0},"source":"js/test.js","original":{"line":109,"column":0}},{"generated":{"line":80,"column":0},"source":"js/test.js","original":{"line":110,"column":0}},{"generated":{"line":81,"column":0},"source":"js/test.js","original":{"line":111,"column":0}},{"generated":{"line":82,"column":0},"source":"js/test.js","original":{"line":113,"column":0}},{"generated":{"line":83,"column":0},"source":"js/test.js","original":{"line":114,"column":0}},{"generated":{"line":84,"column":0},"source":"js/test.js","original":{"line":115,"column":0}},{"generated":{"line":85,"column":0},"source":"js/test.js","original":{"line":117,"column":0}},{"generated":{"line":86,"column":0},"source":"js/test.js","original":{"line":118,"column":0}},{"generated":{"line":87,"column":0},"source":"js/test.js","original":{"line":119,"column":0}},{"generated":{"line":88,"column":0},"source":"js/test.js","original":{"line":120,"column":0}},{"generated":{"line":89,"column":0},"source":"js/test.js","original":{"line":121,"column":0}},{"generated":{"line":90,"column":0},"source":"js/test.js","original":{"line":123,"column":0}},{"generated":{"line":91,"column":0},"source":"js/test.js","original":{"line":125,"column":0}},{"generated":{"line":92,"column":0},"source":"js/test.js","original":{"line":126,"column":0}},{"generated":{"line":93,"column":0},"source":"js/test.js","original":{"line":127,"column":0}},{"generated":{"line":94,"column":0},"source":"js/test.js","original":{"line":129,"column":0}},{"generated":{"line":95,"column":0},"source":"js/test.js","original":{"line":131,"column":0}},{"generated":{"line":96,"column":0},"source":"js/test.js","original":{"line":132,"column":0}},{"generated":{"line":97,"column":0},"source":"js/test.js","original":{"line":133,"column":0}},{"generated":{"line":98,"column":0},"source":"js/test.js","original":{"line":135,"column":0}},{"generated":{"line":99,"column":0},"source":"js/test.js","original":{"line":137,"column":0}},{"generated":{"line":100,"column":0},"source":"js/test.js","original":{"line":138,"column":0}},{"generated":{"line":101,"column":0},"source":"js/test.js","original":{"line":141,"column":0}},{"generated":{"line":102,"column":0},"source":"js/test.js","original":{"line":142,"column":0}},{"generated":{"line":103,"column":0},"source":"js/test.js","original":{"line":143,"column":0}},{"generated":{"line":104,"column":0},"source":"js/test.js","original":{"line":144,"column":0}},{"generated":{"line":105,"column":0},"source":"js/test.js","original":{"line":145,"column":0}},{"generated":{"line":106,"column":0},"source":"js/test.js","original":{"line":147,"column":0}},{"generated":{"line":107,"column":0},"source":"js/test.js","original":{"line":149,"column":0}},{"generated":{"line":108,"column":0},"source":"js/test.js","original":{"line":150,"column":0}},{"generated":{"line":109,"column":0},"source":"js/test.js","original":{"line":151,"column":0}},{"generated":{"line":110,"column":0},"source":"js/test.js","original":{"line":153,"column":0}},{"generated":{"line":111,"column":0},"source":"js/test.js","original":{"line":155,"column":0}},{"generated":{"line":112,"column":0},"source":"js/test.js","original":{"line":157,"column":0}},{"generated":{"line":113,"column":0},"source":"js/test.js","original":{"line":158,"column":0}},{"generated":{"line":114,"column":0},"source":"js/test.js","original":{"line":159,"column":0}},{"generated":{"line":115,"column":0},"source":"js/test.js","original":{"line":160,"column":0}},{"generated":{"line":116,"column":0},"source":"js/test.js","original":{"line":162,"column":0}},{"generated":{"line":117,"column":0},"source":"js/test.js","original":{"line":164,"column":0}},{"generated":{"line":118,"column":0},"source":"js/test.js","original":{"line":167,"column":0}},{"generated":{"line":119,"column":0},"source":"js/test.js","original":{"line":168,"column":0}},{"generated":{"line":120,"column":0},"source":"js/test.js","original":{"line":169,"column":0}},{"generated":{"line":121,"column":0},"source":"js/test.js","original":{"line":171,"column":0}},{"generated":{"line":122,"column":0},"source":"js/test.js","original":{"line":172,"column":0}},{"generated":{"line":123,"column":0},"source":"js/test.js","original":{"line":173,"column":0}},{"generated":{"line":124,"column":0},"source":"js/test.js","original":{"line":175,"column":0}},{"generated":{"line":125,"column":0},"source":"js/test.js","original":{"line":176,"column":0}},{"generated":{"line":126,"column":0},"source":"js/test.js","original":{"line":177,"column":0}},{"generated":{"line":127,"column":0},"source":"js/test.js","original":{"line":178,"column":0}},{"generated":{"line":128,"column":0},"source":"js/test.js","original":{"line":179,"column":0}},{"generated":{"line":129,"column":0},"source":"js/test.js","original":{"line":180,"column":0}},{"generated":{"line":130,"column":0},"source":"js/test.js","original":{"line":183,"column":0}},{"generated":{"line":131,"column":0},"source":"js/test.js","original":{"line":184,"column":0}},{"generated":{"line":132,"column":0},"source":"js/test.js","original":{"line":186,"column":0}},{"generated":{"line":133,"column":0},"source":"js/test.js","original":{"line":188,"column":0}},{"generated":{"line":134,"column":0},"source":"js/test.js","original":{"line":189,"column":0}},{"generated":{"line":135,"column":0},"source":"js/test.js","original":{"line":190,"column":0}},{"generated":{"line":136,"column":0},"source":"js/test.js","original":{"line":192,"column":0}},{"generated":{"line":137,"column":0},"source":"js/test.js","original":{"line":193,"column":0}},{"generated":{"line":138,"column":0},"source":"js/test.js","original":{"line":194,"column":0}},{"generated":{"line":139,"column":0},"source":"js/test.js","original":{"line":196,"column":0}},{"generated":{"line":140,"column":0},"source":"js/test.js","original":{"line":197,"column":0}},{"generated":{"line":141,"column":0},"source":"js/test.js","original":{"line":198,"column":0}},{"generated":{"line":142,"column":0},"source":"js/test.js","original":{"line":201,"column":0}},{"generated":{"line":143,"column":0},"source":"js/test.js","original":{"line":202,"column":0}},{"generated":{"line":144,"column":0},"source":"js/test.js","original":{"line":203,"column":0}},{"generated":{"line":145,"column":0},"source":"js/test.js","original":{"line":205,"column":0}},{"generated":{"line":146,"column":0},"source":"js/test.js","original":{"line":206,"column":0}},{"generated":{"line":147,"column":0},"source":"js/test.js","original":{"line":208,"column":0}},{"generated":{"line":148,"column":0},"source":"js/test.js","original":{"line":209,"column":0}},{"generated":{"line":149,"column":0},"source":"js/test.js","original":{"line":211,"column":0}},{"generated":{"line":150,"column":0},"source":"js/test.js","original":{"line":212,"column":0}},{"generated":{"line":151,"column":0},"source":"js/test.js","original":{"line":213,"column":0}},{"generated":{"line":152,"column":0},"source":"js/test.js","original":{"line":214,"column":0}},{"generated":{"line":153,"column":0},"source":"js/test.js","original":{"line":215,"column":0}},{"generated":{"line":154,"column":0},"source":"js/test.js","original":{"line":216,"column":0}},{"generated":{"line":155,"column":0},"source":"js/test.js","original":{"line":217,"column":0}},{"generated":{"line":156,"column":0},"source":"js/test.js","original":{"line":218,"column":0}},{"generated":{"line":157,"column":0},"source":"js/test.js","original":{"line":219,"column":0}},{"generated":{"line":158,"column":0},"source":"js/test.js","original":{"line":220,"column":0}},{"generated":{"line":159,"column":0},"source":"js/test.js","original":{"line":221,"column":0}},{"generated":{"line":160,"column":0},"source":"js/test.js","original":{"line":222,"column":0}},{"generated":{"line":161,"column":0},"source":"js/test.js","original":{"line":223,"column":0}},{"generated":{"line":162,"column":0},"source":"js/test.js","original":{"line":224,"column":0}},{"generated":{"line":163,"column":0},"source":"js/test.js","original":{"line":225,"column":0}},{"generated":{"line":164,"column":0},"source":"js/test.js","original":{"line":227,"column":0}},{"generated":{"line":165,"column":0},"source":"js/test.js","original":{"line":228,"column":0}},{"generated":{"line":166,"column":0},"source":"js/test.js","original":{"line":229,"column":0}},{"generated":{"line":167,"column":0},"source":"js/test.js","original":{"line":230,"column":0}},{"generated":{"line":168,"column":0},"source":"js/test.js","original":{"line":231,"column":0}}],"sources":{"js/test.js":"'use strict';\n\n// Комментарий, занимающий одну строку.\n\n/* Блочный комментарий начинается с косой черты и звездочки(*), \n   а заканчивается ими же в обратном порядке \n*/ \n\n/*\n    * Это многострочный\n    * комментарий\n*/\n    \n/*  \n  Нельзя вкладывать \\/* комментарии друг в друга SyntaxError *\\/ \n*/\n    \n// alert(\"Hello Javascript!\");\n\n// window.foo = 'Hello bar!';\n\n// alert(window.foo);\n\n// ============Ключевое слово var====================\n// var x = 30;\n// console.log(\"the value of x is\", x); // the value of x is 30\n\n// confirm(\"Well, let's go?\");\n// prompt(\"Dude, tell me everything you know about programming\", \"...\");\n\n// console.log(\"the value of cat is \", cat);\n// var cat = 'Red Cat';\n\n// ============Ключевое слово let====================\n// let a = 10;\n\n// ==========================================\n// console.log(\"the value of cat is \", cat);\n// let cat = 'Red Cat';\n\n//  ReferenceError: can't access lexical declaration\n// `cat' before initialization\n// ==========================================\n\n// console.log(\"the value of a is \", a);\n\n// {\n//     let a = 3;\n//     console.log(\"the value of a inside block is \", a);\n// }\n\n// console.log(\"the value of a outside block is \", a);\n\n\n// console.log(1 / 2); /* возвращает 0.5 */\n// console.log(1 / 2 == 1.0 / 2.0); /* возвращает true */\n\n// ===============declaring variables=============\n\n// let a = 10;\n// let b = 3;\n// let c = 15;\n// let d = '5';\n// let e = 'My name';\n// let f = 'Maybe';\n\n// ============Ключевое слово const====================\n// const NAME_ARR = [];\n// const NAME = 'Maybe';\n// NAME_ARR.push('My name');\n// NAME_ARR.push(NAME);\n// console.log(NAME_ARR[0], ' is ', NAME_ARR[1]);\n\n// ============Группировка сообщений====================\n\n// Вы можете использовать console.group() для создания indented groups в выводе консоли.\n\n// ====================Addition======================\n\n// console.group('Addition');\n// console.log(a + b); // 13\n// console.log(a + d); // 105\n// console.log(e + ' ' + f);\n// console.log(e += ' is the Fly Cat');\n// console.groupEnd();\n\n\n// ==============Оформление сообщений===================\n\n// можете использовать спецификатор формата \"%c\" для стилизации консольных сообщений:\n\nconsole.log(\"%cMy stylish message\", \"color: red; font-style: italic\");\n\n// =========Ошибки округления=============\n// if ( а + Ь == 0.3 ) { \n//   // не делайте так !\n//   alert ( \"You got 0.3 . \" );\n// }\n  \nconsole.log(\"Никогда %cне делайте так!\", \"color: red; font-size: 24px; background-color: yellow; padding: 2px;\");\n\n// ====================Incrementing======================\n// a++;\n// b--;\n// --b;\n// c += a;\n// console.group('Incrementing');\n// console.log(a); // 11   \n// console.log(b); // 1\n// console.log(c); // 25\n// console.groupEnd();\n\n// ====================Присваивание======================\n// var x = 30,\n//     y = 3;\n\n// console.log(\"Присваивание со сложением x += y\", x += y);\n// console.log(\"Присваивание с вычитанием x-=y x=x-y\", x -= y);\n// console.log(\"Присваивание с умножением x *= y x = x * y\", x *= y);\n// console.log(\"Присваивание с делением x /= y x = x / y\", x /= y);\n// console.log(\"Присваивание по модулю x %= y x = x % y\", x %= y);\n\n// =============declaring strings========================\n\n// var srt1 = 'this is my string',\n//     srt2 = 'my second string',\n//     srt3 = \"my name is chris\";\n\n// ===============declaring numbers========================\n\n// let num1 = 10,\n//     num2 = 500,\n//     num3 = 3.14;\n\n// ===============booleans (truthy / falsy)==================\n\n// let b1 = true,\n//     b2 = false;\n\n\n// ==================objects========================\n// const user = {\n//     name: 'Chris',\n//     username: 'chrisoncode'\n// };\n\n// ======================arrays======================\n\n// const users = ['chris', 'nick', 'holly'];\n// const luckyNumbers = [1, 43, 54, 132];\n// const whatever = ['chris', 1, 'holly'];\n\n// ====================typeof=======================\n\n// console.log(typeof (message));\n\n// console.log(typeof (b1));\n// console.log(typeof (num3));\n// console.log(typeof (users));\n// console.log(typeof (user));\n\n// console.log(typeof (null));\n\n// console.log(typeof (function () {}));\n\n\n// ======================undefined==================\n// var messageUndifined;\n// console.log(messageUndifined == undefined);\n\n// =====================null========================\n// var car = null; // пull\n// alert(typeof car); // \"object \"\n\n// =================isNaN===============================\n// console.log(isNaN(NaN)); // true\n// console.log(isNaN(10)); // false\n// console.log(isNaN(\"10\")); // false\n// console.log(isNaN(\"Ыuе\")); // true\n// console.log(isNaN(true)); // false\n\n\n// ========================convert========================\n// Унарный оператор «плюс» работает так же, как функция Number().\n\n// let test = (+\"1.1\") + (+\"1.1\"); // 2.2\n\n// parseInt(\"0xAF\", 16); //175\n// var num = parseFloat(\"1234blue\");\n// var num4 = parseFloat(\"22.5\");\n\n// =======Octal literals are not allowed in strict mode. (W115)=========\n// var xb = 01010101,\n//     yb = 10101010;\n\n// console.log(\"Присваивание с побитовым AND x&=y x=x&y\", xb &= yb);\n// console.log(\"Присваивание с побитовым XOR x^=y x=x^y\", xb ^= yb);\n// console.log(\"Присваивание с побитовым OR x|=y x=x|y\", xb | yb);\n\n\n// var xb = 01010101;\n// console.log(\"Присваивание с левым сдвигом x<<=y xb = xb<<y\", xb <<= y);\n// console.log(\"Присваивание с правым сдвигом xb>>=y xb = xb >> y\", xb >>= y);\n\n// Line is too long. (W101)\n// console.log(\"Присваивание с беззнаковым сдвигом вправо xb>>>=y xb=xb>>> y\", xb >>>= y);\n\n// var message = \"Hello world !\";\n// var messageAsBoolean = Boolean(message);\n\n// ====================boolean operators=======================\n// var a1 = true && true; // t && t возвращает true\n// var a2 = true && false; // t && f возвращает false\n// var a3 = false && true; // f && t возвращает false\n// var a4 = false && (3 == 4); // f && f возвращает false\n// var a5 = \"Cat\" && \"Dog\"; // t && t возвращает Dog\n// var a6 = false && \"Cat\"; // f && t возвращает false\n// var a7 = \"Cat\" && false; // t && f возвращает false\n// var o1 = true || true; // t || t возвращает true\n// var o2 = false || true; // f || t возвращает true\n// var o3 = true || false; // t || f возвращает true\n// var o4 = false || (3 == 4); // f || f возвращает false\n// var o5 = \"Cat\" || \"Dog\"; // t || t возвращает Cat\n// var o6 = false || \"Cat\"; // f || t возвращает Cat\n// var o7 = \"Cat\" || false; // t || f возвращает Cat\n\n// var n1 = !true; // !t возвращает false\n// var n2 = !false; // !f возвращает true\n// var n3 = !\"Cat\"; // !t возвращает false\n// let anything1 = false && anything // \"короткое замыкание\" с результатом false.\n// let anything2 = true || anything // \"короткое замыкание\" с результатом true.\n"},"lineCount":null}},"hash":"84a2a092081a152ff6341adbde383e16","cacheData":{"env":{}}}